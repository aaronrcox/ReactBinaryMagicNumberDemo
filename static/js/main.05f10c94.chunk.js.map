{"version":3,"sources":["components/CounterDemo.js","components/MagicNumberGameSetup.js","components/MagicNumbrCard.js","components/MagicNumberGame.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["CounterDemo","dispatch","useDispatch","count","useSelector","state","counter","className","onClick","type","MagicNumberSetup","maxNumber","numPerCol","value","onChange","event","payload","num","target","preventDefault","navigate","MagicNumberCard","props","max","numbers","pow","cols","i","push","style","width","border","map","index","key","display","padding","heigh","MagicNumberGame","round","Math","guess","reduce","a","b","msg","length","App","path","Boolean","window","location","hostname","match","initialAppState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05f10c94.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useSelector, useDispatch  } from 'react-redux';\r\n\r\n\r\nexport default function CounterDemo() {\r\n\r\n  // this is waht we can use to invoke our reducer\r\n  const dispatch = useDispatch();\r\n\r\n  // get the counter variable from the store\r\n  const count = useSelector(state => state.counter);\r\n\r\n  const handleIncrement = () => dispatch({type: 'inc' });\r\n  const handleDecrement = () => dispatch({type: 'dec'});\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <button onClick={handleIncrement}>Increment</button>\r\n        <h1>{count}</h1>\r\n        <button onClick={handleDecrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { navigate } from \"@reach/router\"\r\n\r\nexport default function MagicNumberSetup() {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const maxNumber = useSelector(state => state.maxNumber );\r\n    const numPerCol = useSelector(state => state.numPerCol );\r\n\r\n    // const [txtMaxNumber, setTxtMaxNumber] = useState(0);\r\n    // const [txtnumPerCol, setnumPerCol] = useState(0);\r\n\r\n    const handleMaxNumberChange = (event) => {\r\n        ///setTxtMaxNumber(event.value);\r\n        dispatch({type: 'setMaxNum', payload: {num: event.target.value} } );\r\n    };\r\n\r\n    const handleNumPerColChange = (event) => {\r\n        dispatch({type: 'setNumPerCol', payload: {num: event.target.value} } );\r\n    };\r\n\r\n    const handlePlayClick = (event) => {\r\n        event.preventDefault();\r\n        dispatch({type: 'resetRounds' });\r\n        navigate('/play');\r\n    }\r\n\r\n    return(<div>\r\n\r\n        <label>Max Number</label>\r\n        <input type='number' value={maxNumber} onChange={handleMaxNumberChange} />\r\n        \r\n        <br />\r\n\r\n        <label>Numbers per column</label>\r\n        <input type='number' value={numPerCol} onChange={handleNumPerColChange} />\r\n\r\n        <br />\r\n\r\n        <button onClick={handlePlayClick}>Play</button>\r\n\r\n    </div>);\r\n}\r\n","import React from 'react'; \r\n\r\nexport default function MagicNumberCard(props) {\r\n\r\n    const min = 0;\r\n    const max = props.max;\r\n    const numbers = [];\r\n    const pow = props.pow;\r\n    const cols = props.cols;\r\n\r\n    for(let i=min; i<=max; i++){\r\n        if ((i & pow) === pow) {\r\n            numbers.push(i);\r\n        }\r\n    }\r\n\r\n    return (<div style={{width: '100%', border: '1px solid black'}}>\r\n\r\n        {numbers.map((num, index) => <span key={'n-'+num+'-p-'+pow}>\r\n            { index > 0 && index % cols === 0 && <br />}\r\n            <span style={{display: 'inline-block', padding: 10, width: 50, heigh: 50, border: '1px solid black'}}>\r\n                {num}\r\n            </span>\r\n            </span>\r\n        )}\r\n\r\n    </div>);\r\n}","import React from 'react';\r\nimport MagicNumberCard from './MagicNumbrCard';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function MagicNumberGame() {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const numPerCol = useSelector(state => state.numPerCol);\r\n    const maxNumber = useSelector(state => state.maxNumber);\r\n    const round = useSelector(state => state.round);\r\n    const numbers = useSelector(state => state.numbers);\r\n\r\n    const pow = Math.pow(2, round);\r\n    const guess = numbers.reduce((a, b) => a + b, 0);\r\n\r\n    let msg = '';\r\n    if(pow >= maxNumber ) {\r\n        msg = 'your number is: ' + guess;\r\n    }\r\n\r\n    const handleYesClick = (event) => {\r\n        event.preventDefault();\r\n        dispatch({type: 'addNumber', payload: {num: pow}});\r\n        dispatch({type: 'nextRound'});\r\n    }\r\n\r\n    const handleNoClick = (event) => {\r\n        event.preventDefault();\r\n        dispatch({type: 'nextRound'});\r\n    }\r\n\r\n    const handleResetClick = (event) => {\r\n        event.preventDefault();\r\n        dispatch({type: 'resetRounds'});\r\n    }\r\n\r\n    \r\n    return(<div>\r\n\r\n        { msg.length > 0 && \r\n            <h1>{msg}</h1>\r\n        }\r\n\r\n        { msg.length === 0 && \r\n            <div>\r\n                <MagicNumberCard pow={pow} cols={numPerCol} max={maxNumber} ></MagicNumberCard>\r\n\r\n                <p>\r\n                    is your number in the grid?\r\n                </p>\r\n                <button onClick={handleYesClick} >Yes</button>\r\n                <button onClick={handleNoClick}>No</button>\r\n            </div>\r\n        }\r\n\r\n        \r\n        <button onClick={handleResetClick}>Reset</button>\r\n\r\n    </div>);\r\n}","\nimport React from 'react';\nimport { Router } from \"@reach/router\"\nimport CounterDemo from './components/CounterDemo';\nimport MagicNumberGameSetup from './components/MagicNumberGameSetup';\nimport MagicNumberGame from './components/MagicNumberGame';\n\nfunction App() {\n\n  return (\n    <div>\n      <Router>\n        <CounterDemo path='/'></CounterDemo>\n        <MagicNumberGameSetup path='setup'></MagicNumberGameSetup>\n        <MagicNumberGame path='play'></MagicNumberGame>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\r\n\r\n// this is the initial representation of our application state.\r\nconst initialAppState = {\r\n    counter: 0,\r\n    maxNumber: 32,\r\n    numPerCol: 4,\r\n    round: 0,\r\n    numbers: []\r\n};\r\n\r\nexport function reducer(state = initialAppState, action) {\r\n\r\n    switch( action.type) {\r\n        case 'inc': {\r\n            return { ...state, counter: state.counter + 1 };\r\n        }\r\n        case 'dec': {\r\n            return { ...state, counter: state.counter - 1 };\r\n        }\r\n        case 'setMaxNum': {\r\n            return {...state, maxNumber: action.payload.num }\r\n        }\r\n        case 'setNumPerCol': {\r\n            return {...state, numPerCol: action.payload.num }\r\n        }\r\n        case 'nextRound': {\r\n            return {...state, round: state.round + 1 }\r\n        }\r\n        case 'resetRounds': {\r\n            return {...state, round: 0, numbers: [] }\r\n        }\r\n        case 'addNumber': {\r\n            const numbers = [...state.numbers];\r\n            numbers.push(action.payload.num);\r\n            return {...state, numbers };\r\n        }\r\n        default: return state;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// this is thee store object\r\n// that we will provide to our application.\r\nexport const store = createStore( reducer );\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}